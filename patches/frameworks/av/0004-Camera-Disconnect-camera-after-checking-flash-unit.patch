From 4c07dcc66e1681b5a58a7658e8752c59ea2de5d6 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Sun, 17 Sep 2017 12:28:16 +0300
Subject: [PATCH 04/35] Camera: Disconnect camera after checking flash unit
 Disconnect camera device after opening it just to check if it has a flash
 unit. Leave it open if torch is being turned on.

Change-Id: Ied7a203cd4aa19f99484dc07c3da439522b75120
---
 .../camera/libcameraservice/CameraFlashlight.cpp   | 25 +++-------------------
 .../camera/libcameraservice/CameraFlashlight.h     |  6 +-----
 2 files changed, 4 insertions(+), 27 deletions(-)

diff --git a/services/camera/libcameraservice/CameraFlashlight.cpp b/services/camera/libcameraservice/CameraFlashlight.cpp
index e06a81f..830867e 100644
--- a/services/camera/libcameraservice/CameraFlashlight.cpp
+++ b/services/camera/libcameraservice/CameraFlashlight.cpp
@@ -347,8 +347,7 @@ status_t CameraHardwareInterfaceFlashControl::setTorchMode(
     status_t res;
     if (enabled) {
         bool hasFlash = false;
-        // Check if it has a flash unit and leave camera device open.
-        res = hasFlashUnitLocked(cameraId, &hasFlash, /*keepDeviceOpen*/true);
+        res = hasFlashUnitLocked(cameraId, &hasFlash);
         // invalid camera?
         if (res) {
             // hasFlashUnitLocked() returns BAD_INDEX if mDevice is connected to
@@ -357,8 +356,6 @@ status_t CameraHardwareInterfaceFlashControl::setTorchMode(
         }
         // no flash unit?
         if (!hasFlash) {
-            // Disconnect camera device if it has no flash.
-            disconnectCameraDevice();
             return -ENOSYS;
         }
     } else if (mDevice == NULL || cameraId != mCameraId) {
@@ -387,28 +384,21 @@ status_t CameraHardwareInterfaceFlashControl::setTorchMode(
 status_t CameraHardwareInterfaceFlashControl::hasFlashUnit(
         const String8& cameraId, bool *hasFlash) {
     Mutex::Autolock l(mLock);
-    // Close device after checking if it has a flash unit.
-    return hasFlashUnitLocked(cameraId, hasFlash, /*keepDeviceOpen*/false);
+    return hasFlashUnitLocked(cameraId, hasFlash);
 }
 
 status_t CameraHardwareInterfaceFlashControl::hasFlashUnitLocked(
-        const String8& cameraId, bool *hasFlash, bool keepDeviceOpen) {
-    bool closeCameraDevice = false;
-
+        const String8& cameraId, bool *hasFlash) {
     if (!hasFlash) {
         return BAD_VALUE;
     }
 
     status_t res;
     if (mDevice == NULL) {
-        // Connect to camera device to query if it has a flash unit.
         res = connectCameraDevice(cameraId);
         if (res) {
             return res;
         }
-        // Close camera device only when it is just opened and the caller doesn't want to keep
-        // the camera device open.
-        closeCameraDevice = !keepDeviceOpen;
     }
 
     if (cameraId != mCameraId) {
@@ -423,15 +413,6 @@ status_t CameraHardwareInterfaceFlashControl::hasFlashUnitLocked(
         *hasFlash = false;
     }
 
-    if (closeCameraDevice) {
-        res = disconnectCameraDevice();
-        if (res != OK) {
-            ALOGE("%s: Failed to disconnect camera device. %s (%d)", __FUNCTION__,
-                    strerror(-res), res);
-            return res;
-        }
-    }
-
     return OK;
 }
 
diff --git a/services/camera/libcameraservice/CameraFlashlight.h b/services/camera/libcameraservice/CameraFlashlight.h
index c86ee85..371f8b8 100644
--- a/services/camera/libcameraservice/CameraFlashlight.h
+++ b/services/camera/libcameraservice/CameraFlashlight.h
@@ -159,11 +159,7 @@ class CameraHardwareInterfaceFlashControl : public FlashControlBase {
         status_t getSmallestSurfaceSize(int32_t *width, int32_t *height);
 
         // protected by mLock
-        // If this function opens camera device in order to check if it has a flash unit, the
-        // camera device will remain open if keepDeviceOpen is true and the camera device will be
-        // closed if keepDeviceOpen is false. If camera device is already open when calling this
-        // function, keepDeviceOpen is ignored.
-        status_t hasFlashUnitLocked(const String8& cameraId, bool *hasFlash, bool keepDeviceOpen);
+        status_t hasFlashUnitLocked(const String8& cameraId, bool *hasFlash);
 
         sp<CameraProviderManager> mProviderManager;
         const camera_module_callbacks_t *mCallbacks;
-- 
2.7.4

