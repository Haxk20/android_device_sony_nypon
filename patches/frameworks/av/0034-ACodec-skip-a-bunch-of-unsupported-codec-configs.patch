From 724b1f29fef95292a09f97f20401ce38c1d3d29a Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Sat, 26 Nov 2016 18:36:32 +0700
Subject: [PATCH 34/35] ACodec: skip a bunch of unsupported codec configs

Change-Id: Idd60b1452473cccd36023007f289136a7aafb2aa
---
 media/libstagefright/ACodec.cpp | 19 ++++++++++++-------
 1 file changed, 12 insertions(+), 7 deletions(-)

diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
index 07cc5b1..8909bda 100755
--- a/media/libstagefright/ACodec.cpp
+++ b/media/libstagefright/ACodec.cpp
@@ -2263,12 +2263,13 @@ status_t ACodec::configureCodec(
         err = OK; // ignore error
     }
 
+/*
     int32_t priority;
     if (msg->findInt32("priority", &priority)) {
         err = setPriority(priority);
         err = OK; // ignore error
     }
-
+*/
     int32_t rateInt = -1;
     float rateFloat = -1;
     if (!msg->findFloat("operating-rate", &rateFloat)) {
@@ -3442,9 +3443,9 @@ status_t ACodec::setColorAspectsForVideoDecoder(
         // format, in case component does not support this enumeration.
         setColorAspectsIntoFormat(params.sAspects, outputFormat);
     }
-
+/*
     (void)initDescribeColorAspectsIndex();
-
+*/
     // communicate color aspects to codec
     return setCodecColorAspects(params);
 }
@@ -3906,13 +3907,13 @@ status_t ACodec::setupVideoEncoder(
     if (err != OK) {
         return err;
     }
-
+/*
     err = setHDRStaticInfoForVideoCodec(kPortIndexInput, msg, outputFormat);
     if (err == ERROR_UNSUPPORTED) { // support is optional
         ALOGI("[%s] cannot encode HDR static metadata. Ignoring.", mComponentName.c_str());
         err = OK;
     }
-
+*/
     if (err != OK) {
         return err;
     }
@@ -7262,7 +7263,7 @@ status_t ACodec::setParameters(const sp<AMessage> &params) {
             return err;
         }
     }
-
+/*
     float rate;
     if (params->findFloat("operating-rate", &rate) && rate > 0) {
         status_t err = setOperatingRate(rate, mIsVideo);
@@ -7293,6 +7294,7 @@ status_t ACodec::setParameters(const sp<AMessage> &params) {
         }
     }
 
+*/
     status_t err = configureTemporalLayers(params, false /* inConfigure */, mOutputFormat);
     if (err != OK) {
         err = OK; // ignore failure
@@ -8336,12 +8338,13 @@ status_t ACodec::queryCapabilities(
 
     if (isVideo && !isEncoder) {
         native_handle_t *sidebandHandle = NULL;
+/*
         if (omxNode->configureVideoTunnelMode(
                 kPortIndexOutput, OMX_TRUE, 0, &sidebandHandle) == OK) {
             // tunneled playback includes adaptive playback
             builder->addFlags(MediaCodecInfo::Capabilities::kFlagSupportsAdaptivePlayback
                     | MediaCodecInfo::Capabilities::kFlagSupportsTunneledPlayback);
-        } else if (omxNode->setPortMode(
+        } else*/ if (omxNode->setPortMode(
                 kPortIndexOutput, IOMX::kPortModeDynamicANWBuffer) == OK ||
                 omxNode->prepareForAdaptivePlayback(
                 kPortIndexOutput, OMX_TRUE,
@@ -8349,6 +8352,7 @@ status_t ACodec::queryCapabilities(
             builder->addFlags(MediaCodecInfo::Capabilities::kFlagSupportsAdaptivePlayback);
         }
     }
+/*
 
     if (isVideo && isEncoder) {
         OMX_VIDEO_CONFIG_ANDROID_INTRAREFRESHTYPE params;
@@ -8361,6 +8365,7 @@ status_t ACodec::queryCapabilities(
             builder->addFlags(MediaCodecInfo::Capabilities::kFlagSupportsIntraRefresh);
         }
     }
+*/
 
     *caps = builder;
     omxNode->freeNode();
-- 
2.7.4

