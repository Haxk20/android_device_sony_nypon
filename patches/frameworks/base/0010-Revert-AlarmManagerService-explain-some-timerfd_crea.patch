From 59566ea9b41be9a5fb061457e7a220420aed9f5a Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Sun, 17 Sep 2017 23:16:44 +0300
Subject: [PATCH 10/18] Revert "AlarmManagerService: explain some
 timerfd_create() failures"

This reverts commit a0126e0857481866dab5060384d611c83ca53d0e.

Change-Id: Ia57168e938fa94290b8325a24debf04f1c4825ef
---
 .../jni/com_android_server_AlarmManagerService.cpp | 29 ++---------------
 .../com/android/server/usb/UsbDeviceManager.java   | 36 ++++++++++++++++------
 2 files changed, 28 insertions(+), 37 deletions(-)

diff --git a/services/core/jni/com_android_server_AlarmManagerService.cpp b/services/core/jni/com_android_server_AlarmManagerService.cpp
index 3a0273d..36105bd 100644
--- a/services/core/jni/com_android_server_AlarmManagerService.cpp
+++ b/services/core/jni/com_android_server_AlarmManagerService.cpp
@@ -298,32 +298,6 @@ static int wall_clock_rtc()
     return -1;
 }
 
-static void log_timerfd_create_error(clockid_t id)
-{
-    if (errno == EINVAL) {
-        switch (id) {
-        case CLOCK_REALTIME_ALARM:
-        case CLOCK_BOOTTIME_ALARM:
-            ALOGE("kernel missing required commits:");
-            ALOGE("https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=6cffe00f7d4e24679eae6b7aae4caaf915288256");
-            ALOGE("https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=11ffa9d6065f344a9bd769a2452f26f2f671e5f8");
-            LOG_ALWAYS_FATAL("kernel does not support timerfd_create() with alarm timers");
-            break;
-
-        case CLOCK_BOOTTIME:
-            ALOGE("kernel missing required commit:");
-            ALOGE("https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=4a2378a943f09907fb1ae35c15de917f60289c14");
-            LOG_ALWAYS_FATAL("kernel does not support timerfd_create(CLOCK_BOOTTIME)");
-            break;
-
-        default:
-            break;
-        }
-    }
-
-    ALOGE("timerfd_create(%u) failed: %s", id, strerror(errno));
-}
-
 static jlong android_server_AlarmManagerService_init(JNIEnv*, jobject)
 {
     int epollfd;
@@ -339,7 +313,8 @@ static jlong android_server_AlarmManagerService_init(JNIEnv*, jobject)
     for (size_t i = 0; i < fds.size(); i++) {
         fds[i] = timerfd_create(android_alarm_to_clockid[i], 0);
         if (fds[i] < 0) {
-            log_timerfd_create_error(android_alarm_to_clockid[i]);
+            ALOGE("timerfd_create(%u) failed: %s",  android_alarm_to_clockid[i],
+                    strerror(errno));
             close(epollfd);
             for (size_t j = 0; j < i; j++) {
                 close(fds[j]);
diff --git a/services/usb/java/com/android/server/usb/UsbDeviceManager.java b/services/usb/java/com/android/server/usb/UsbDeviceManager.java
index ca74688..67f1de5 100644
--- a/services/usb/java/com/android/server/usb/UsbDeviceManager.java
+++ b/services/usb/java/com/android/server/usb/UsbDeviceManager.java
@@ -371,7 +371,9 @@ public class UsbDeviceManager {
         private boolean mSinkPower;
         private boolean mConfigured;
         private boolean mUsbDataUnlocked;
+        private boolean mUsbHackUsedOnce;
         private String mCurrentFunctions;
+        private String mPersistFunctions;
         private boolean mCurrentFunctionsApplied;
         private UsbAccessory mCurrentAccessory;
         private int mUsbNotificationId;
@@ -402,9 +404,9 @@ public class UsbDeviceManager {
                  * Use the normal bootmode persistent prop to maintain state of adb across
                  * all boot modes.
                  */
-                mAdbEnabled = UsbManager.containsFunction(
+                mAdbEnabled = true; /*UsbManager.containsFunction(
                         SystemProperties.get(USB_PERSISTENT_CONFIG_PROPERTY),
-                        UsbManager.USB_FUNCTION_ADB);
+                        UsbManager.USB_FUNCTION_ADB);*/
 
                 /**
                  * Previous versions can set persist config to mtp/ptp but it does not
@@ -534,12 +536,13 @@ public class UsbDeviceManager {
                 SystemProperties.set(USB_PERSISTENT_CONFIG_PROPERTY, newFunction);
 
                 // Remove mtp from the config if file transfer is not enabled
+/*
                 if (oldFunctions.equals(UsbManager.USB_FUNCTION_MTP) &&
                         !mUsbDataUnlocked && enable) {
                     oldFunctions = UsbManager.USB_FUNCTION_NONE;
                 }
-
-                setEnabledFunctions(oldFunctions, true, mUsbDataUnlocked);
+*/
+                setEnabledFunctions(oldFunctions, true, true);
                 updateAdbNotification();
             }
 
@@ -558,6 +561,8 @@ public class UsbDeviceManager {
                         + "forceRestart=" + forceRestart + ", usbDataUnlocked=" + usbDataUnlocked);
             }
 
+	    usbDataUnlocked = true;
+
             if (usbDataUnlocked != mUsbDataUnlocked) {
                 mUsbDataUnlocked = usbDataUnlocked;
                 updateUsbNotification();
@@ -707,7 +712,7 @@ public class UsbDeviceManager {
             // make sure accessory mode is off
             // and restore default functions
             Slog.d(TAG, "exited USB accessory mode");
-            setEnabledFunctions(null, false, false);
+            //setEnabledFunctions(null, false, false);
 
             if (mCurrentAccessory != null) {
                 if (mBootCompleted) {
@@ -850,10 +855,6 @@ public class UsbDeviceManager {
                         updateCurrentAccessory();
                     }
                     if (mBootCompleted) {
-                        if (!mConnected) {
-                            // restore defaults when USB is disconnected
-                            setEnabledFunctions(null, !mAdbEnabled, false);
-                        }
                         updateUsbFunctions();
                     } else {
                         mPendingBootBroadcast = true;
@@ -922,7 +923,7 @@ public class UsbDeviceManager {
                             Slog.v(TAG, "Current user switched to " + msg.arg1
                                     + "; resetting USB host stack for MTP or PTP");
                             // avoid leaking sensitive data from previous user
-                            setEnabledFunctions(mCurrentFunctions, true, false);
+                            setEnabledFunctions(mCurrentFunctions, true, true);
                         }
                         mCurrentUser = msg.arg1;
                     }
@@ -957,6 +958,21 @@ public class UsbDeviceManager {
             int id = 0;
             int titleRes = 0;
             Resources r = mContext.getResources();
+
+	    mUsbDataUnlocked = true;
+            if (mConnected) {
+                    if (!mUsbHackUsedOnce) {
+                            mPersistFunctions = getDefaultFunctions();
+                            //if (UsbManager.containsFunction(mPersistFunctions,
+                            //      UsbManager.USB_FUNCTION_MTP))
+
+                            setCurrentFunctions(UsbManager.USB_FUNCTION_MTP, mUsbDataUnlocked);
+
+                            mUsbHackUsedOnce = true;
+           	    }
+	    } else
+                    mUsbHackUsedOnce = false;
+
             if (mConnected) {
                 if (!mUsbDataUnlocked) {
                     if (mSourcePower) {
-- 
2.7.4

