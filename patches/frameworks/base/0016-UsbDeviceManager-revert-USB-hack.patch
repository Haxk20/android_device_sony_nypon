From 5988888b9ae241075b7278ebc287e2d2db6fd63d Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Sun, 24 Sep 2017 17:20:30 +0300
Subject: [PATCH 16/18] UsbDeviceManager: revert USB hack

Change-Id: Iead7324f048867193919fbfe1d82f22d66472721
---
 .../com/android/server/usb/UsbDeviceManager.java   | 36 ++++++----------------
 1 file changed, 10 insertions(+), 26 deletions(-)

diff --git a/services/usb/java/com/android/server/usb/UsbDeviceManager.java b/services/usb/java/com/android/server/usb/UsbDeviceManager.java
index 67f1de5..ca74688 100644
--- a/services/usb/java/com/android/server/usb/UsbDeviceManager.java
+++ b/services/usb/java/com/android/server/usb/UsbDeviceManager.java
@@ -371,9 +371,7 @@ public class UsbDeviceManager {
         private boolean mSinkPower;
         private boolean mConfigured;
         private boolean mUsbDataUnlocked;
-        private boolean mUsbHackUsedOnce;
         private String mCurrentFunctions;
-        private String mPersistFunctions;
         private boolean mCurrentFunctionsApplied;
         private UsbAccessory mCurrentAccessory;
         private int mUsbNotificationId;
@@ -404,9 +402,9 @@ public class UsbDeviceManager {
                  * Use the normal bootmode persistent prop to maintain state of adb across
                  * all boot modes.
                  */
-                mAdbEnabled = true; /*UsbManager.containsFunction(
+                mAdbEnabled = UsbManager.containsFunction(
                         SystemProperties.get(USB_PERSISTENT_CONFIG_PROPERTY),
-                        UsbManager.USB_FUNCTION_ADB);*/
+                        UsbManager.USB_FUNCTION_ADB);
 
                 /**
                  * Previous versions can set persist config to mtp/ptp but it does not
@@ -536,13 +534,12 @@ public class UsbDeviceManager {
                 SystemProperties.set(USB_PERSISTENT_CONFIG_PROPERTY, newFunction);
 
                 // Remove mtp from the config if file transfer is not enabled
-/*
                 if (oldFunctions.equals(UsbManager.USB_FUNCTION_MTP) &&
                         !mUsbDataUnlocked && enable) {
                     oldFunctions = UsbManager.USB_FUNCTION_NONE;
                 }
-*/
-                setEnabledFunctions(oldFunctions, true, true);
+
+                setEnabledFunctions(oldFunctions, true, mUsbDataUnlocked);
                 updateAdbNotification();
             }
 
@@ -561,8 +558,6 @@ public class UsbDeviceManager {
                         + "forceRestart=" + forceRestart + ", usbDataUnlocked=" + usbDataUnlocked);
             }
 
-	    usbDataUnlocked = true;
-
             if (usbDataUnlocked != mUsbDataUnlocked) {
                 mUsbDataUnlocked = usbDataUnlocked;
                 updateUsbNotification();
@@ -712,7 +707,7 @@ public class UsbDeviceManager {
             // make sure accessory mode is off
             // and restore default functions
             Slog.d(TAG, "exited USB accessory mode");
-            //setEnabledFunctions(null, false, false);
+            setEnabledFunctions(null, false, false);
 
             if (mCurrentAccessory != null) {
                 if (mBootCompleted) {
@@ -855,6 +850,10 @@ public class UsbDeviceManager {
                         updateCurrentAccessory();
                     }
                     if (mBootCompleted) {
+                        if (!mConnected) {
+                            // restore defaults when USB is disconnected
+                            setEnabledFunctions(null, !mAdbEnabled, false);
+                        }
                         updateUsbFunctions();
                     } else {
                         mPendingBootBroadcast = true;
@@ -923,7 +922,7 @@ public class UsbDeviceManager {
                             Slog.v(TAG, "Current user switched to " + msg.arg1
                                     + "; resetting USB host stack for MTP or PTP");
                             // avoid leaking sensitive data from previous user
-                            setEnabledFunctions(mCurrentFunctions, true, true);
+                            setEnabledFunctions(mCurrentFunctions, true, false);
                         }
                         mCurrentUser = msg.arg1;
                     }
@@ -958,21 +957,6 @@ public class UsbDeviceManager {
             int id = 0;
             int titleRes = 0;
             Resources r = mContext.getResources();
-
-	    mUsbDataUnlocked = true;
-            if (mConnected) {
-                    if (!mUsbHackUsedOnce) {
-                            mPersistFunctions = getDefaultFunctions();
-                            //if (UsbManager.containsFunction(mPersistFunctions,
-                            //      UsbManager.USB_FUNCTION_MTP))
-
-                            setCurrentFunctions(UsbManager.USB_FUNCTION_MTP, mUsbDataUnlocked);
-
-                            mUsbHackUsedOnce = true;
-           	    }
-	    } else
-                    mUsbHackUsedOnce = false;
-
             if (mConnected) {
                 if (!mUsbDataUnlocked) {
                     if (mSourcePower) {
-- 
2.7.4

