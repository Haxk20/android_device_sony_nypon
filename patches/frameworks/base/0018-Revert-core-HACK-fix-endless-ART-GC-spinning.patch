From 16865788c73420f89943d02eed84aed34962ae44 Mon Sep 17 00:00:00 2001
From: Shilin Victor <chrono.monochrome@gmail.com>
Date: Sun, 1 Oct 2017 02:44:46 +0300
Subject: [PATCH 18/18] Revert "core: HACK: fix endless ART GC spinning"

This reverts commit 8731567959faaf537c9d6e1cb67b3016992e685e.

Change-Id: I3acb43af173ef164ba27f47456a09048b99254dc
---
 core/java/com/android/internal/os/ZygoteInit.java | 57 ++++++++++-------------
 1 file changed, 25 insertions(+), 32 deletions(-)

diff --git a/core/java/com/android/internal/os/ZygoteInit.java b/core/java/com/android/internal/os/ZygoteInit.java
index 4b1ee45..142effb 100644
--- a/core/java/com/android/internal/os/ZygoteInit.java
+++ b/core/java/com/android/internal/os/ZygoteInit.java
@@ -123,25 +123,25 @@ public class ZygoteInit {
 
     static void preload(BootTimingsTraceLog bootTimingsTraceLog) {
         Log.d(TAG, "begin preload");
-        //bootTimingsTraceLog.traceBegin("BeginIcuCachePinning");
-        //beginIcuCachePinning();
-        //bootTimingsTraceLog.traceEnd(); // BeginIcuCachePinning
-        //bootTimingsTraceLog.traceBegin("PreloadClasses");
-        //preloadClasses();
-        //bootTimingsTraceLog.traceEnd(); // PreloadClasses
-        //bootTimingsTraceLog.traceBegin("PreloadResources");
-        //preloadResources();
-        //bootTimingsTraceLog.traceEnd(); // PreloadResources
-        //Trace.traceBegin(Trace.TRACE_TAG_DALVIK, "PreloadOpenGL");
-        //preloadOpenGL();
-        //Trace.traceEnd(Trace.TRACE_TAG_DALVIK);
+        bootTimingsTraceLog.traceBegin("BeginIcuCachePinning");
+        beginIcuCachePinning();
+        bootTimingsTraceLog.traceEnd(); // BeginIcuCachePinning
+        bootTimingsTraceLog.traceBegin("PreloadClasses");
+        preloadClasses();
+        bootTimingsTraceLog.traceEnd(); // PreloadClasses
+        bootTimingsTraceLog.traceBegin("PreloadResources");
+        preloadResources();
+        bootTimingsTraceLog.traceEnd(); // PreloadResources
+        Trace.traceBegin(Trace.TRACE_TAG_DALVIK, "PreloadOpenGL");
+        preloadOpenGL();
+        Trace.traceEnd(Trace.TRACE_TAG_DALVIK);
         preloadSharedLibraries();
-        //preloadTextResources();
+        preloadTextResources();
         // Ask the WebViewFactory to do any initialization that must run in the zygote process,
         // for memory sharing purposes.
-        //WebViewFactory.prepareWebViewInZygote();
-        //endIcuCachePinning();
-        //warmUpJcaProviders();
+        WebViewFactory.prepareWebViewInZygote();
+        endIcuCachePinning();
+        warmUpJcaProviders();
         Log.d(TAG, "end preload");
 
         sPreloadComplete = true;
@@ -723,31 +723,24 @@ public class ZygoteInit {
             // In some configurations, we avoid preloading resources and classes eagerly.
             // In such cases, we will preload things prior to our first fork.
             if (!enableLazyPreload) {
-                //bootTimingsTraceLog.traceBegin("ZygotePreload");
-                //EventLog.writeEvent(LOG_BOOT_PROGRESS_PRELOAD_START,
-                //    SystemClock.uptimeMillis());
+                bootTimingsTraceLog.traceBegin("ZygotePreload");
+                EventLog.writeEvent(LOG_BOOT_PROGRESS_PRELOAD_START,
+                    SystemClock.uptimeMillis());
                 preload(bootTimingsTraceLog);
-                Log.i(TAG, "preload");
-
-                //EventLog.writeEvent(LOG_BOOT_PROGRESS_PRELOAD_END,
-                //    SystemClock.uptimeMillis());
-                //bootTimingsTraceLog.traceEnd(); // ZygotePreload
-	        //    Log.i(TAG, "Trace.traceEnd(Trace.TRACE_TAG_DALVIK);");
-
+                EventLog.writeEvent(LOG_BOOT_PROGRESS_PRELOAD_END,
+                    SystemClock.uptimeMillis());
+                bootTimingsTraceLog.traceEnd(); // ZygotePreload
             } else {
                 Zygote.resetNicePriority();
             }
 
             // Finish profiling the zygote initialization.
             SamplingProfilerIntegration.writeZygoteSnapshot();
-            Log.i(TAG, "SamplingProfilerIntegration.writeZygoteSnapshot();");
-
 
             // Do an initial gc to clean up after startup
-            //bootTimingsTraceLog.traceBegin("PostZygoteInitGC");
-            //gcAndFinalize();
-            //bootTimingsTraceLog.traceEnd(); // PostZygoteInitGC
-            Log.i(TAG, "//gcAndFinalize();");
+            bootTimingsTraceLog.traceBegin("PostZygoteInitGC");
+            gcAndFinalize();
+            bootTimingsTraceLog.traceEnd(); // PostZygoteInitGC
 
             bootTimingsTraceLog.traceEnd(); // ZygoteInit
             // Disable tracing so that forked processes do not inherit stale tracing tags from
-- 
2.7.4

