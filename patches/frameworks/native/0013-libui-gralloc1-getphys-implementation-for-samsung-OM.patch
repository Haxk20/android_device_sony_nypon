From d32a890d809f43a1138cff72b180f1aa3df87d5d Mon Sep 17 00:00:00 2001
From: Simon Shields <keepcalm444@gmail.com>
Date: Sun, 30 Oct 2016 12:05:11 +1100
Subject: [PATCH 13/27] libui: gralloc1 getphys implementation for samsung OMX

Change-Id: I68d6b621e12a6f98dee94daab174adb390cce44e
---
 include/ui/Gralloc1.h            |  8 ++++++++
 include/ui/Gralloc1On0Adapter.h  | 14 +++++++++++++-
 include/ui/GraphicBufferMapper.h |  4 ++++
 libs/ui/Gralloc1.cpp             | 13 +++++++++++++
 libs/ui/Gralloc1On0Adapter.cpp   | 25 +++++++++++++++++++++++++
 libs/ui/GraphicBufferMapper.cpp  | 12 ++++++++++++
 6 files changed, 75 insertions(+), 1 deletion(-)

diff --git a/include/ui/Gralloc1.h b/include/ui/Gralloc1.h
index 90713b3..87e6775 100644
--- a/include/ui/Gralloc1.h
+++ b/include/ui/Gralloc1.h
@@ -170,6 +170,10 @@ public:
             gralloc1_consumer_usage_t consumerUsage,
             const gralloc1_rect_t* accessRegion, struct android_ycbcr* outData,
             const sp<Fence>& acquireFence);
+#ifdef STE_HARDWARE
+    gralloc1_error_t getphys(buffer_handle_t buffer,
+            void **paddr);
+#endif
 
     gralloc1_error_t unlock(buffer_handle_t buffer, sp<Fence>* outFence);
 
@@ -265,6 +269,10 @@ private:
                 GRALLOC1_FUNCTION_LOCK_YCBCR> lockYCbCr;
         FunctionLoader<GRALLOC1_PFN_UNLOCK,
                 GRALLOC1_FUNCTION_UNLOCK> unlock;
+#ifdef STE_HARDWARE
+        FunctionLoader<GRALLOC1_PFN_GETPHYS,
+                GRALLOC1_FUNCTION_GETPHYS> getphys;
+#endif
 
         // Adapter-only functions
         FunctionLoader<GRALLOC1_PFN_RETAIN_GRAPHIC_BUFFER,
diff --git a/include/ui/Gralloc1On0Adapter.h b/include/ui/Gralloc1On0Adapter.h
index 6379a08..2990288 100644
--- a/include/ui/Gralloc1On0Adapter.h
+++ b/include/ui/Gralloc1On0Adapter.h
@@ -81,6 +81,14 @@ private:
     }
     std::string mCachedDump;
 
+#ifdef STE_HARDWARE
+    static int32_t getphysHook(gralloc1_device_t* device,
+            buffer_handle_t handle,
+            void **paddr) {
+        return getAdapter(device)->getphys(device, handle, paddr);
+    }
+#endif
+
     // Buffer descriptor lifecycle functions
 
     struct Descriptor;
@@ -332,7 +340,11 @@ private:
     static gralloc1_error_t allocateWithIdHook(gralloc1_device_t* device,
             gralloc1_buffer_descriptor_t descriptors,
             gralloc1_backing_store_t id, buffer_handle_t* outBuffer);
-
+#ifdef STE_HARDWARE
+    gralloc1_error_t getphys(gralloc1_device_t* device,
+            buffer_handle_t buffer,
+            void **paddr);
+#endif
     gralloc1_error_t retain(const std::shared_ptr<Buffer>& buffer);
     gralloc1_error_t release(const std::shared_ptr<Buffer>& buffer);
 
diff --git a/include/ui/GraphicBufferMapper.h b/include/ui/GraphicBufferMapper.h
index d69f8fc..9cd3601 100644
--- a/include/ui/GraphicBufferMapper.h
+++ b/include/ui/GraphicBufferMapper.h
@@ -78,6 +78,10 @@ public:
 
     status_t unlockAsync(buffer_handle_t handle, int *fenceFd);
 
+#ifdef STE_HARDWARE
+    status_t getphys(buffer_handle_t handle, void** paddr);
+#endif
+
     const Gralloc2::Mapper& getGrallocMapper() const
     {
         return *mMapper;
diff --git a/libs/ui/Gralloc1.cpp b/libs/ui/Gralloc1.cpp
index 64a8b40..70cf69c 100644
--- a/libs/ui/Gralloc1.cpp
+++ b/libs/ui/Gralloc1.cpp
@@ -361,6 +361,14 @@ gralloc1_error_t Device::lockYCbCr(buffer_handle_t buffer,
             consumerUsage, accessRegion, outData, acquireFence);
 }
 
+#ifdef STE_HARDWARE
+gralloc1_error_t Device::getphys(buffer_handle_t buffer, void** paddr)
+{
+    int32_t intError = mFunctions.getphys(mDevice, buffer, paddr);
+    return static_cast<gralloc1_error_t>(intError);
+}
+#endif
+
 gralloc1_error_t Device::unlock(buffer_handle_t buffer, sp<Fence>* outFence)
 {
     int32_t fenceFd = -1;
@@ -448,6 +456,11 @@ bool Device::loadFunctions()
     if (!mFunctions.unlock.load(mDevice, true)) {
         return false;
     }
+#ifdef STE_HARDWARE
+    if (!mFunctions.getphys.load(mDevice, true)) {
+        return false;
+    }
+#endif
 
     if (hasCapability(GRALLOC1_CAPABILITY_ON_ADAPTER)) {
         // These should always be present on the adapter
diff --git a/libs/ui/Gralloc1On0Adapter.cpp b/libs/ui/Gralloc1On0Adapter.cpp
index 0fac7ef..a8b12f6 100644
--- a/libs/ui/Gralloc1On0Adapter.cpp
+++ b/libs/ui/Gralloc1On0Adapter.cpp
@@ -173,6 +173,10 @@ gralloc1_function_pointer_t Gralloc1On0Adapter::doGetFunction(
                     &Gralloc1On0Adapter::lockYCbCr>);
         case GRALLOC1_FUNCTION_UNLOCK:
             return asFP<GRALLOC1_PFN_UNLOCK>(unlockHook);
+#ifdef STE_HARDWARE
+        case GRALLOC1_FUNCTION_GETPHYS:
+            return asFP<GRALLOC1_PFN_GETPHYS>(getphysHook);
+#endif
         case GRALLOC1_FUNCTION_INVALID:
             ALOGE("Invalid function descriptor");
             return nullptr;
@@ -306,6 +310,27 @@ gralloc1_error_t Gralloc1On0Adapter::allocateWithIdHook(
     return error;
 }
 
+#ifdef STE_HARDWARE
+gralloc1_error_t Gralloc1On0Adapter::getphys(
+        gralloc1_device_t* device,
+        buffer_handle_t handle,
+        void **paddr)
+{
+    gralloc1_error_t err;
+    auto adapter = getAdapter(device);
+    int res = mModule->getphys(mModule, handle, paddr);
+
+    if (res) {
+        ALOGE("getphys(%p) fail %d(%s)", handle, res, strerror(-res));
+        err = GRALLOC1_ERROR_UNDEFINED;
+    } else {
+        err = GRALLOC1_ERROR_NONE;
+    }
+
+    return err;
+}
+#endif
+
 gralloc1_error_t Gralloc1On0Adapter::retain(
         const std::shared_ptr<Buffer>& buffer)
 {
diff --git a/libs/ui/GraphicBufferMapper.cpp b/libs/ui/GraphicBufferMapper.cpp
index 87519bf..05c3a24 100644
--- a/libs/ui/GraphicBufferMapper.cpp
+++ b/libs/ui/GraphicBufferMapper.cpp
@@ -393,5 +393,17 @@ status_t GraphicBufferMapper::unlockAsync(buffer_handle_t handle, int *fenceFd)
     return error;
 }
 
+#ifdef STE_HARDWARE
+status_t GraphicBufferMapper::getphys(buffer_handle_t handle, void** paddr)
+{
+    status_t err;
+
+    err = mDevice->getphys(handle, paddr);
+
+    ALOGW_IF(err, "getphys(%p) fail %d(%s)", handle, err, strerror(-err));
+    return err;
+}
+#endif
+
 // ---------------------------------------------------------------------------
 }; // namespace android
-- 
2.7.4

